/**
 * @fileoverview MariaDB Ë≥áÊñôÂ∫´ÈÄ£Á∑öÊ±†ÈÖçÁΩÆ
 * ‰ΩøÁî® mysql2/promise Êèê‰æõ Promise-based ÁöÑË≥áÊñôÂ∫´Êìç‰Ωú‰ªãÈù¢
 * 
 * ÈÄ£Á∑öÊ±†ÂÑ™Âã¢Ôºö
 * - ÈáçË§á‰ΩøÁî®Ë≥áÊñôÂ∫´ÈÄ£Á∑öÔºåÊ∏õÂ∞ëÈÄ£Á∑öÂª∫Á´ãÈñãÈä∑
 * - Ëá™ÂãïÁÆ°ÁêÜÈÄ£Á∑öÁîüÂëΩÈÄ±Êúü
 * - ÊîØÊè¥È´ò‰∏¶ÁôºË´ãÊ±ÇËôïÁêÜ
 * 
 * @module config/database
 * @requires mysql2/promise
 * @author Rick
 * @version 1.0.0
 */

const mysql = require('mysql2/promise');
require('dotenv').config();

// ============================================================================
// Ë≥áÊñôÂ∫´ÈÄ£Á∑öÊ±†ÈÖçÁΩÆ
// ============================================================================

/**
 * MariaDB ÈÄ£Á∑öÊ±†ÂØ¶‰æã
 * 
 * ÈÖçÁΩÆË™™ÊòéÔºö
 * @property {string} host - Ë≥áÊñôÂ∫´‰∏ªÊ©ü‰ΩçÂùÄÔºàÈ†êË®≠ÔºölocalhostÔºâ
 * @property {string} user - Ë≥áÊñôÂ∫´‰ΩøÁî®ËÄÖÂêçÁ®±ÔºàÈ†êË®≠ÔºörootÔºâ
 * @property {string} password - Ë≥áÊñôÂ∫´ÂØÜÁ¢ºÔºàÈ†êË®≠ÔºöpasswordÔºâ
 * @property {string} database - ÁõÆÊ®ôË≥áÊñôÂ∫´ÂêçÁ®±ÔºàÈ†êË®≠Ôºöapp_dbÔºâ
 * @property {number} port - Ë≥áÊñôÂ∫´ÈÄ£Êé•Âü†ÔºàÈ†êË®≠Ôºö3306Ôºâ
 * @property {boolean} waitForConnections - Áï∂ÈÄ£Á∑öÊ±†ÊªøÊôÇÊòØÂê¶Á≠âÂæÖÔºàtrue = ÊéíÈöäÁ≠âÂæÖÔºâ
 * @property {number} connectionLimit - ÈÄ£Á∑öÊ±†ÊúÄÂ§ßÈÄ£Á∑öÊï∏Ôºà10 ÂÄã‰∏¶ÁôºÈÄ£Á∑öÔºâ
 * @property {number} queueLimit - ÊéíÈöäÁ≠âÂæÖÈÄ£Á∑öÁöÑË´ãÊ±ÇÊï∏‰∏äÈôêÔºà0 = ÁÑ°ÈôêÂà∂Ôºâ
 * 
 * @type {Pool}
 * 
 * @example
 * // ‰ΩøÁî®ÈÄ£Á∑öÊ±†Âü∑Ë°åÊü•Ë©¢
 * const connection = await pool.getConnection();
 * try {
 *   const [rows] = await connection.query('SELECT * FROM users');
 *   console.log(rows);
 * } finally {
 *   connection.release(); // ÂãôÂøÖÈáãÊîæÈÄ£Á∑öÂõûÈÄ£Á∑öÊ±†
 * }
 * 
 * @example
 * // Áõ¥Êé•‰ΩøÁî®ÈÄ£Á∑öÊ±†Âü∑Ë°åÔºàËá™ÂãïÁÆ°ÁêÜÈÄ£Á∑öÔºâ
 * const [rows] = await pool.query('SELECT * FROM users WHERE id = ?', [userId]);
 */
const pool = mysql.createPool({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || 'password',
    database: process.env.DB_NAME || 'app_db',
    port: process.env.DB_PORT || 3306,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// ============================================================================
// ÈÄ£Á∑öÊ±†‰∫ã‰ª∂Áõ£ËÅΩÔºàÁî®ÊñºÈñãÁôºÈô§ÈåØÔºâ
// ============================================================================

/**
 * Áõ£ËÅΩÈÄ£Á∑öÂèñÂæó‰∫ã‰ª∂
 * Âú®ÈñãÁôºÁí∞Â¢É‰∏≠ËøΩËπ§ÈÄ£Á∑öÊ±†‰ΩøÁî®ÁãÄÊ≥Å
 */
pool.on('acquire', (connection) => {
    if (process.env.NODE_ENV === 'development') {
        console.log('üîó Connection %d acquired', connection.threadId);
    }
});

/**
 * Áõ£ËÅΩÈÄ£Á∑öÈáãÊîæ‰∫ã‰ª∂
 * Á¢∫‰øùÈÄ£Á∑öÊ≠£Á¢∫Ê≠∏ÈÇÑËá≥ÈÄ£Á∑öÊ±†
 */
pool.on('release', (connection) => {
    if (process.env.NODE_ENV === 'development') {
        console.log('üîì Connection %d released', connection.threadId);
    }
});

/**
 * Áõ£ËÅΩÈÄ£Á∑öÂÖ•Èöä‰∫ã‰ª∂
 * Áï∂ÈÄ£Á∑öÊ±†ÊªøËºâÊôÇÔºåÊñ∞Ë´ãÊ±ÇÊúÉÈÄ≤ÂÖ•Á≠âÂæÖ‰ΩáÂàó
 */
pool.on('enqueue', () => {
    if (process.env.NODE_ENV === 'development') {
        console.log('‚è≥ Waiting for available connection slot');
    }
});

module.exports = pool;